Nodejs — Is a platform like java, .Net for application development. It uses javascript as language. Earlier javascript was mostly used in browser or web application development. Using nodejs we can now write server side application with javascript language.

npm - node package manager. for installing nodejs libraries.
bower - web package manager ( js, css, fonts, templates). for installing web libraries.
grunt - Its nodejs tool. web build tool — Minify, uglify, etc. It executes the task as defined in grunt.js file.


global
Documents/.npm/node_modules/grunt
npm install -g grunt-cli 

local
project/node_modules/grunt
D:project/> npm install grunt-cli —save

Development Coding conventions
camel case: employeeName -> method, variable
pascal case: EmployeeName -> ClassName, Constant
capital case: EMPLOYEE_NAME -> Constant
snake case: employee_name

Todos:
CRUD

Data Model
Employee
id, AutoGenerated
name,
gender,
dob,
address,
contactNo,
email


Employee List: Page1
Employee Create/Update: Page2
Header / Footer



Data Storage: MongoDB / Local Persistent Object

REST API for employee:

http url: /employee
http method: GET
desc: It should return, list of all employees
response: [
    { id:1, name:"karthik", ..}, { ..}
]

http url: /employee/{id}
http method: GET
desc: It should return single employee object
response: { id:1, name:"karthik", ..}

http url: /employee
http method: POST
http params: { name: ‘karthik’, .. }
desc: This end point can be used for saving employee
response: [
    success: true,
    message: ‘employee saved'
]

http url: /employee
http method: PUT
http params: { id:1, name: ‘karthik’, .. }
desc: This end point can be used for updating employee
response: [
    success: true,
    message: ‘employee updated'
]

http url: /employee
http method: DELETE
http params: { id:1, name: ‘karthik’, .. }
desc: This end point can be used for deleting employee.
response: [
    success: true,
    message: ‘employee deleted'
]


Development: 
1. Front End - Angularjs, html, css, jquery, bootstrap
2. Back End - nodejs, expressjs, libraries, Mongodb

MEAN Stack -> MongoDB, ExpressJS, AngularJs, Nodejs

Tools:

1. nodejs
2. expressjs - web development framework for server side development.

AngularJs — Its a javascript MVC framework using which we can do front end development. It provides duplex data binding between view and model. So, when model is changed then view gets updated. similarly when binded value in view gets changed then model gets updated. 


View:
input name
input contact

Model:
{
    name: ’test’,
    contact: ‘89318392'
}

Model (DATA Model)
View (HTML PAGE)
Controller (ACTION)


Terms:

Module -> Its a base for controller.

Controller -> Controller we use it for handling actions from the page, and setting model values.

Directive -> Angular directive can be custom element, attribute or class using which we can create custom component or behavior for UI. AngularJS already have lots of pre defined directives like ng-app, ng-controller, ng-if, ng-repeat, ng-bind, ng-required, etc.
Similary we can create custom angular directive like ng-calculator or some component.

Service -> AngularJS service can be used for providing data to controllers.

Scope -> Scope means context in which the defined variable or object is accessible. for example if we declare variable in if block, its accessible only inside if block. It can’t be accessed from outside.

Dependency Injection -> It is the design pattern by using which we can  pass or inject the required object at run time. When using AngularJS, We can use required angular modules or services in a controller. It will be injected by angular at run time.


Watch ->  Angular tracks or watches the changes in object continuously by using the feature. If we apply angular watch on any angular scope variable, then angular notifes the changes by calling the  callback function.

Factory -> 
Components ->

interface A{
 int add(int a, int b);
}

class B implements A{
  public int add(int a, int b){
    return a+b;
  }
}

class C implements A{
  public int add(int a, int b){
    return a+b;
  }
}

class Target{
  private A obj;

  public Target(A obj){
      this.obj = obj;
  }
  
 public int sum(int a, int b){
     return this.obj.add(a, b);
 }

}

Target tObj = new Target(new B()); // valid. This is where we are doing dependency injection.


<div>
    <div ng-controller=“ctrl”>
        <span></span>
    </div>
</div>
